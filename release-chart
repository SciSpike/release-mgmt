#!/bin/sh

# MIT License
#
# Copyright (c) 2018 SciSpike, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This script implements the release branch workflow for helm charts.
#
# Requirements:
# git
# docker (unless ymlx & match are available on the path as reported by `which`)

if [ -n "$RELEASE_DEBUG" ]; then
  set -x
fi

ORIGIN=${ORIGIN:-origin}
MASTER=${MASTER:-master}
TAG_PREFIX=${TAG_PREFIX:-''}
TAG_SUFFIX=${TAG_SUFFIX:-''}
BRANCH_PREFIX=${BRANCH_PREFIX:-'v'}
BRANCH_SUFFIX=${BRANCH_SUFFIX:-''} # '.x' is a common one
if [ -z "$NO_GIT_DISCOVERY_ACROSS_FILESYSTEM" ]; then
  GIT_DISCOVERY_ACROSS_FILESYSTEM=1 # needed when running in a docker container
fi
# support custom "pre" tokens
PRE=${PRE:-pre}
PRE_USAGE=pre
if [ "$PRE" != "pre" ]; then
  PRE_USAGE="$PRE_USAGE|$PRE"
fi
# support custom "rc" tokens
RC=${RC:-rc}
RC_USAGE=rc
if [ "$RC" != "rc" ]; then
  RC_USAGE="$RC_USAGE|$RC"
fi

if [ "$PRE" == "$RC" ]; then
  echo "ERROR: PRE ($PRE) cannot be the same as RC ($RC)" >&2
  exit 1
fi

usage() {
    cat<<EOF
usage:
if on $MASTER branch: release $PRE_USAGE|$RC_USAGE [chart]
if on release branch: release major|minor|patch|$PRE_USAGE [chart]

where:
  chart is the name of the chart and its directory, unless it is ".."
    * if ".." is given, chart name is assumed to be the name of the directory containing the current working directory, otherwise
    * the default value is the only directory name in this directory that does not start with ".", unless there are multiple

optional supported environment variables:

variable                            description
--------                            -----------
ORIGIN                              name of git remote, default 'origin'
MASTER                              name of master branch, default 'master'
TAG_PREFIX                          prefix for tags, default ''
TAG_SUFFIX                          suffix for tags, default ''
BRANCH_PREFIX                       prefix for release branches, default 'v'
BRANCH_SUFFIX                       suffix for release branches, default '' ('.x' is common)
NO_GIT_DISCOVERY_ACROSS_FILESYSTEM  whether to not set GIT_DISCOVERY_ACROSS_FILESYSTEMS, default ''
CHART_DIR                           name of chart directory, default derived from given chart name
CHART_FILE                          name of chart file, default derived from chart directory
EOF
}

YMLX=ymlx
if ! which $YMLX; then
  YMLX="docker run --rm -i matthewadams12/$YMLX"
fi
MATCH=match
if ! which $MATCH; then
  MATCH="docker run --rm -i matthewadams12/$MATCH"
fi

CHART_NAME="$(echo "$2" | $MATCH '(.*)/?$' | awk '{ print $1 }')" # drop trailing slash if it's there
if [ "$CHART_NAME" = '..' ]; then
  CHART_NAME="$(basename $(pwd) | $MATCH '(.*)/?$' | awk '{ print $1 }')"
  CHART_DIR=${CHART_DIR:-.}
elif [ -n "$CHART_NAME" ]; then
  CHART_NAME="$(echo "$CHART_NAME" | $MATCH '(.*)/?$' | awk '{ print $1 }')"
  CHART_DIR="${CHART_DIR:-$CHART_NAME}"
else # no chart name given; see if there is a single directory in pwd that doesn't start with "."
  NON_DOT_DIRS="$(find . -type d -maxdepth 1 | sed 's|^\./||g' | grep -v '^\.')" # directories that don't start with '.'
  if [ $(echo "$NON_DOT_DIRS" | wc -l | xargs) = 1 ]; then # we'll assume this sole dir is chart dir
    CHART_NAME="$(echo "$NON_DOT_DIRS" | $MATCH '(.*)/?$' | awk '{ print $1 }')"
    echo "INFO: using $CHART_NAME as chart name"
  else
    echo "ERROR: no chart name given & can't guess chart name from child directories in this directory"
    usage
    exit 1
  fi
  CHART_DIR="${CHART_DIR:-$CHART_NAME}"
fi
CHART_DIR="$(echo "$CHART_DIR" | $MATCH '(.*)/?$' | awk '{ print $1 }')"
CHART_FILE="${CHART_FILE:-$CHART_DIR/Chart.yaml}"
echo "INFO: using chart name:      $CHART_NAME"
echo "INFO: using chart directory: $CHART_DIR"
echo "INFO: using chart file:      $CHART_FILE"

getVersion() {
  cat "$CHART_FILE" | $YMLX this.version
}

# usage: setVersion version
setVersion() {
  V=$1
  CHART_CONTENT="$(cat $CHART_FILE)"
  echo "$CHART_CONTENT" \
    | $YMLX "it => { it.version = \"$V\"; return it; }" \
    > $CHART_FILE
  echo "INFO: set 'version' attribute in $CHART_FILE to $V"
  echo "$CHART_FILE is now:"
  cat "$CHART_FILE"
}