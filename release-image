#!/bin/sh

# MIT License
#
# Copyright (c) 2018 SciSpike, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This script implements usage(), getVersion() & setVersion() for projects producing Docker images.

usage_image() {
    cat<<EOF
usage:
if on $MASTER branch: release $PRE_USAGE|$RC_USAGE
if on release branch: release major|minor|patch|$PRE_USAGE

optional supported environment variables:

variable                            description
--------                            -----------
ORIGIN                              name of git remote, default 'origin'
MASTER                              name of master branch, default 'master'
TAG_PREFIX                          prefix for tags, default ''
TAG_SUFFIX                          suffix for tags, default ''
BRANCH_PREFIX                       prefix for release branches, default 'v'
BRANCH_SUFFIX                       suffix for release branches, default '' ('.x' is common)
NO_GIT_DISCOVERY_ACROSS_FILESYSTEM  whether to not set GIT_DISCOVERY_ACROSS_FILESYSTEMS, default ''
VERSION_FILE                        name of file containing version, default 'Dockerfile'
VERSION_LABEL                       name of LABEL entry containing version, default 'version'
EOF
}

VERSION_FILE="${VERSION_FILE:-Dockerfile}"
echo "INFO: using version file: $VERSION_FILE"
VERSION_LABEL="${VERSION_LABEL:-version}"
echo "INFO: using version label: $VERSION_LABEL"

VERSION_LABEL_LINES="$(egrep '^LABEL' "$VERSION_FILE" | egrep -o "$VERSION_LABEL=\"?[0-9]+\.[0-9]+\.[0-9]+(-[^ \"]*)?\"?")"
if [ $(echo "$VERSION_LABEL_LINES" | wc -l) != 1 ]; then
  echo "ERROR: ambiguous or missing LABEL line with $VERSION_LABEL=<semver> entry" >&2
  exit 10
fi

getVersion_image() {
  echo $(egrep '^LABEL' "$VERSION_FILE" | egrep -o "$VERSION_LABEL=\"?[0-9]+\.[0-9]+\.[0-9]+(-[^ \"]*)?\"?" | cut -d'=' -f2 | sed 's/"//g')
}

# usage: setVersion version
setVersion_image() {
  V=$1

  first=true
  printf "$(cat "$VERSION_FILE")\n" | while read line; do
    label="$(echo "$line"  | egrep '^LABEL' | egrep "$VERSION_LABEL=\"?[0-9]+\.[0-9]+\.[0-9]+(-[^ \"]*)?\"?" || true)"
    if [ -z "$label" ]; then # skip it
      if [ $first = true ]; then
        first=false
        VERSION_FILE_CONTENT="$line"
      else
        VERSION_FILE_CONTENT="$VERSION_FILE_CONTENT\n$line"
      fi
    else # we found the LABEL line with the version=<semver> in it; replace & append to VERSION_FILE_CONTENT
      line="$(echo "$label" | sed -E "s/$VERSION_LABEL=\"?[0-9]+\.[0-9]+\.[0-9]+(-[^ \"]*)?\"?/$VERSION_LABEL=$1/")"
      VERSION_FILE_CONTENT="$VERSION_FILE_CONTENT\n$line"
    fi
    printf "$VERSION_FILE_CONTENT" > "$VERSION_FILE"
  done
  VERSION_FILE_CONTENT="$(cat "$VERSION_FILE")\n"
  printf "$VERSION_FILE_CONTENT" > "$VERSION_FILE"

  echo "INFO: set $VERSION_LABEL attribute in $VERSION_FILE to $V"
  echo "$VERSION_FILE is now:"
  cat "$VERSION_FILE"
}